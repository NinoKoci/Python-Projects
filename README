1. Introduction:

This is a K number neighbor classifieer for CS-167 Homework 5



2. How to run this code:



i. install packages:

        - import numpy as np

        - import pandas as pd, to help us parse through the 

        - from collections import Counter, to help me with finding the most common label in the voting function 

        - import matplotlib.pyplot as plt for plotting the knn_accuracies 

        - import sys, for inserting stand in for the training_data, test_data and k

        -from sklearn.cluster import AgglomerativeClustering, for Task 2



ii. Use a command console and insert:

    $ python classify.py < train_data.txt test_data.txt k(number of neighbors) > 'output.txt'

    This format will run in any iteration.

    ex: python classify.py GSE994-train.txt GSE994-test.txt 1 >'Prob5-1NNoutput.txt'

        python classify.py GSE994-train.txt GSE994-test.txt 3 >'Prob5-3NNoutput.txt'



    Note: Classify will return the labels for the test data for our desired k number of neighbors,

            It will also return the data for cross validation and Agglomerative Clustering, which include:

            - most accuracte k value for cross validation 

            - a grpah of the acuuracies of the k_list for cross validation called knn_accuracies.png

            - the accuracy of the bes k value and the Agglomerative Clustering

            - true positive (TP), true negative (TN), false positive (FP), and the false negative (FN) counts for both





iii. Initial Parameters 

    For this run, we will be using 

            The trainig set GSE994-train.txt

            The test set GSE994-test.txt, which we will predict the labels through the traoing set and k number of neigbors 

            k = 1 or 3, the k number of neigbors to predict teh labels for the test set 

            motif_len = 6 This will be the motif length or k,

            k_list = [1, 3, 5, 7, 11, 21, 23], the number of k number neighbors we will test for in the cross validation

            K = 5, the number of folds we will perfor on the training set to test the accuray of the k_list





iv. How the algorithm runs

    1. def train_set(train_set) and def test_set(test_set), these two fucntions will parse the traning nd test data an return the x_train(values,labels), y_train(labels), and the x_test(vaues, labels)



    2. class KNNClassifier()

        a. This class will be initialized with __init__(self,x_train, y_train), where we will insert our class initial parameters.

        b. euclidean_distance(self, x1, x2), to calculate the euclidian distace between two points 

        c. k_neighbors(self, distances), will take the total distancces er each patient in the test data and all the traning data and return the longest distances per k number 

        d. tie_break(self, neighbors), takes in the labels from the distances and decides which is the most numerous one 

        e. predict(self, x_test), uses all the previous functions to return a list of labels for each patient in the test data

    

    3. accuracy(y_true, y_pred), takes in the y_train list and compares it with the y_predicted list for when we perform folds per k number neighbors on the tranng set. It will then count the number of matching values at position i and divide by the length of te y_train list. 



    4. cross_valid(k_vals, K, x_train, y_train), will perform a K fold validaion per each number of k number neighbors in the k list. It will use two dictionaries, one for the label prediction of the y_predicted values, and the other for the accuracy of the predicted predicted lables for each fold. The accuracy will be measured via the accuracy function and averaged for all the folds. 



    5. def calc_TP_TN_FP_FN(y_true, y_pred), takes the y_train data and the predicted data from the cross validation to measure the calculate the true positive, true negative, false positive and false negative counts



    6. cluster_labeler(labels), this fucntion will esentally take the binary labels from of the Agglomerative Clustering and return 0 or 1  0 and 1 for CurrentSmoker and NeverSmoker respectively



    7. main(), this function is split into three parts

        i. will take the traininag and test data and return the predicted labels for teh test set patients 

        ii. will perform the cross validation for the differnt k values, then predict all their accuracies. Then find the best performing k value and use it to calculate the TP, TN, FP, FN for that k value

        iii. Perfrom the Agglomerative Clustering based on te paramters we were given. Then calcute the accuracy of the clusterijng with the TP, TN, FP, FN. 





3. Acknowlegments: 

I want to thank Benson Wang for heling me with the main() funtion 

I also want to acknowlege these repositiories for giving me an idea of how a knn number of neighbors works:

https://www.geeksforgeeks.org/k-nearest-neighbours/

https://stackoverflow.com/questions/28390941/store-multiple-values-for-one-key-in-dictionary

https://www.geeksforgeeks.org/python-get-key-with-maximum-value-in-dictionary/

https://www.geeksforgeeks.org/executing-functions-with-multiple-arguments-at-a-terminal-in-python/

